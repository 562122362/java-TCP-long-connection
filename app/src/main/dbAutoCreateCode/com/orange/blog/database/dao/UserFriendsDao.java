package com.orange.blog.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.orange.blog.database.bean.UserFriends;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_FRIENDS".
*/
public class UserFriendsDao extends AbstractDao<UserFriends, Void> {

    public static final String TABLENAME = "USER_FRIENDS";

    /**
     * Properties of entity UserFriends.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SelfUUID = new Property(0, String.class, "selfUUID", false, "SELF_UUID");
        public final static Property FriendUUID = new Property(1, String.class, "friendUUID", false, "FRIEND_UUID");
        public final static Property FriendIP = new Property(2, String.class, "friendIP", false, "FRIEND_IP");
    };


    public UserFriendsDao(DaoConfig config) {
        super(config);
    }
    
    public UserFriendsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_FRIENDS\" (" + //
                "\"SELF_UUID\" TEXT NOT NULL ," + // 0: selfUUID
                "\"FRIEND_UUID\" TEXT NOT NULL UNIQUE ," + // 1: friendUUID
                "\"FRIEND_IP\" TEXT NOT NULL );"); // 2: friendIP
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_FRIENDS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserFriends entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSelfUUID());
        stmt.bindString(2, entity.getFriendUUID());
        stmt.bindString(3, entity.getFriendIP());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public UserFriends readEntity(Cursor cursor, int offset) {
        UserFriends entity = new UserFriends( //
            cursor.getString(offset + 0), // selfUUID
            cursor.getString(offset + 1), // friendUUID
            cursor.getString(offset + 2) // friendIP
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserFriends entity, int offset) {
        entity.setSelfUUID(cursor.getString(offset + 0));
        entity.setFriendUUID(cursor.getString(offset + 1));
        entity.setFriendIP(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(UserFriends entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(UserFriends entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
